---
title: "plan372-hw3-quarto"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
rm(list=ls()) # Clear memory
install.packages("sf")
```

Loading the necessary libraries

```{r}
library(tidyverse)
library(sf) # The sf package provides functions for working with spatial data
```

Creating census block dataset
```{r}
census = read_sf("orange_durham_wake_block_groups.shp")
#NOTE: I had to put this document inside my hw3 data folder for it to run properly, and also open a new project as hw3 data
```

- This doesn't have any demographic information, so I need to read in a csv file that does 
- NOTE: GEOID in census is a character but a number in census_demographics 
- Have to change the GEOID to a character type in census_demographics according to lecture video

Adding Census Demographic csv
```{r}
census_demographics = read.csv("triangle_census.csv")

#, col_types=c(GEOID="character"))

#followed this code from one of the lectures and I kept getting an error. I asked ChatGPT what this error meant and it told me that this was a code from the readr package, which I have not downloaded, and that there was an easier way to do it, which is shown below.
```

Changing GEOID column to character (help from CHATGPT)
```{r}
census_demographics$GEOID <- as.character(census_demographics$GEOID)
#this worked
```

Double-checking if there are duplicated rows
```{r}
stopifnot(!any(duplicated(census$GEOID))) 
stopifnot(!any(duplicated(census_demographics$GEOID))) 

#stops if there is ANY duplicate GEOIDs in the census and in the census demographic datasets, which is necessary because we need to do a 1 to 1 ratio with them both 
#did nothing; no stops 
```

- Now I need to join the two datasets so there's information about census demographics for every block.

Joining the two datasets 
```{r}
census_info = left_join(census, census_demographics, by="GEOID")
```

#Question 3: What percentage of the Wake County population resides in food deserts?

Filtering for Wake County
```{r}
unique(census_info$COUNTYFP) 
```

But which one is Wake? 183. I looked it up and found a pdf of the census state county FIPS code list with names: https://www2.census.gov/programs-surveys/decennial/2010/partners/pdf/FIPS_StateCounty_Code.pdf

General dataset for just Wake County (useful for future questions)
```{r}
wake = census_info |>
  filter(COUNTYFP == "183")
```

```{r}
sum(wake$total_population) 
#just to double check with info from assignment (there are 1,069,079 residents of Wake County)
```

```{r}
  wake |>
  summarize(pct_fd = sum(total_population[wake$near_store==0]) / sum(total_population) * 100)  
#food desert == 0 bc it wasn't selected 
#conditional in brackets is a way of writing I found on Stack Overflow: https://stackoverflow.com/questions/32148664/create-summary-statistics-based-on-condition
  
```

Percent of Wake County residents living in a food desert is 9.9%.

#Question 4: Calculate the percentage of households that do not own a vehicle, and the percentage of households who are low income, in both the food desert and Wake County overall.
```{r}
wake_cars = wake |>
  summarize(
    fd_cars=sum(zero_vehicle_households[near_store==0])/sum(total_households[near_store==0]) * 100,
    all_cars=sum(zero_vehicle_households)/sum(total_households) * 100
            ) 
```
